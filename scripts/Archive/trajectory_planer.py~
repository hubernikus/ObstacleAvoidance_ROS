#!/usr/bin/env python

#'''
#obstacle publisher class
#
#@author lukashuber
#@date 2018-06-08
#
#'''


from obstacle_recognition.msg import Obstacle
from trajectory_msgs.msg import JointTrajectory

import numpy as np
from math import pi, floor

import tf


class trajectoryPlanner():
    def __init__(self, a=[1,1,1], p=[1,1,1], x0=[0,0,0], th_r=[0,2,0], sf=1, sigma=1):
        # Initialize node
        rospy.init_node('ellipse_publisher', anonymous=True)
        rate = rospy.Rate(20) # Frequency

        # Create publishers
        elli_pub = rospy.Publisher('ellipse1_out', PolygonStamped, queue_size=5)
        obs_pub = rospy.Publisher('obstacle1', Obstacle, queue_size=5)
        br_obs_pub = tf.TransformBroadcaster()

        # Create listener
        #pose_sub = rospy.Subscriber("object_1/pose", Obstacle, self.callback)

        pose_sub = rospy.Subscriber("object_2/pose", Obstacle, self.callback)
        self.obs = []

        while not rospy.is_shutdown():
            rospy.loginfo("Publishing ellipse %s" % rospy.get_time())
        
    def callback(self,msg):
        
        i =0 # TODO add second obstacle
        obs[i] = msg
        

            
